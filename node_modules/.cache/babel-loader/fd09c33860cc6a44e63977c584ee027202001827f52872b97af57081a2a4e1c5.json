{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/LEARN-academy/portfolio/portfolio/home-page/src/components/Projects.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Card, CardBody, CardTitle, Accordion, AccordionItem, AccordionHeader, AccordionBody } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const [open, setOpen] = useState(\"1\");\n  const toggle = id => {\n    if (open === id) {\n      setOpen();\n    } else {\n      setOpen(id);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    color: \"dark\",\n    inverse: true,\n    className: \"primary-card\",\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n        tag: \"h5\",\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Accordion, {\n        stayOpen: true,\n        flush: true,\n        open: open,\n        toggle: toggle,\n        children: [/*#__PURE__*/_jsxDEV(AccordionItem, {\n          children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n            targetId: \"1\",\n            children: \"Accordion Item 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n            accordionId: \"1\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the first item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this), \"You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 38\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccordionItem, {\n          children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n            targetId: \"2\",\n            children: \"Accordion Item 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n            accordionId: \"2\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the second item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this), \"You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 38\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccordionItem, {\n          children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n            targetId: \"3\",\n            children: \"Accordion Item 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccordionBody, {\n            accordionId: \"3\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This is the third item's accordion body.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), \"You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \".accordion-body\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 38\n            }, this), \", though the transition does limit overflow.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"SrjOZdjLUc20bKSo3T49WDXWp3o=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useState","Card","CardBody","CardTitle","Accordion","AccordionItem","AccordionHeader","AccordionBody","jsxDEV","_jsxDEV","Projects","_s","open","setOpen","toggle","id","color","inverse","className","children","tag","fileName","_jsxFileName","lineNumber","columnNumber","stayOpen","flush","targetId","accordionId","_c","$RefreshReg$"],"sources":["/Users/learnacademy/Desktop/LEARN-academy/portfolio/portfolio/home-page/src/components/Projects.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Accordion,\n  AccordionItem,\n  AccordionHeader,\n  AccordionBody,\n} from \"reactstrap\";\n\nconst Projects = () => {\n  const [open, setOpen] = useState(\"1\");\n  const toggle = (id) => {\n    if (open === id) {\n      setOpen();\n    } else {\n      setOpen(id);\n    }\n  };\n  return (\n    <Card color=\"dark\" inverse className=\"primary-card\">\n      <CardBody>\n        <CardTitle tag=\"h5\">Projects</CardTitle>\n        <Accordion stayOpen flush open={open} toggle={toggle}>\n          <AccordionItem>\n            <AccordionHeader targetId=\"1\">Accordion Item 1</AccordionHeader>\n            <AccordionBody accordionId=\"1\">\n              <strong>This is the first item&#39;s accordion body.</strong>\n              You can modify any of this with custom CSS or overriding our\n              default variables. It&#39;s also worth noting that just about any\n              HTML can go within the <code>.accordion-body</code>, though the\n              transition does limit overflow.\n            </AccordionBody>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionHeader targetId=\"2\">Accordion Item 2</AccordionHeader>\n            <AccordionBody accordionId=\"2\">\n              <strong>This is the second item&#39;s accordion body.</strong>\n              You can modify any of this with custom CSS or overriding our\n              default variables. It&#39;s also worth noting that just about any\n              HTML can go within the <code>.accordion-body</code>, though the\n              transition does limit overflow.\n            </AccordionBody>\n          </AccordionItem>\n          <AccordionItem>\n            <AccordionHeader targetId=\"3\">Accordion Item 3</AccordionHeader>\n            <AccordionBody accordionId=\"3\">\n              <strong>This is the third item&#39;s accordion body.</strong>\n              You can modify any of this with custom CSS or overriding our\n              default variables. It&#39;s also worth noting that just about any\n              HTML can go within the <code>.accordion-body</code>, though the\n              transition does limit overflow.\n            </AccordionBody>\n          </AccordionItem>\n        </Accordion>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default Projects;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}